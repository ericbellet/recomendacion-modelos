# Multiplicacion Matriz por Vector usando mapreduce
# Tipo 1: el caso en que el vector v cabe dentro de la memoria RAM
MultMV_1.mr <- function( M, V) {
d <- values(from.dfs(V))
f <- function(x){return(x[3]*d[x[2],2])}
map <- function(.,m) {
i <- m[1]
m <- as.matrix(m)
valor <- apply(m,1,f)
valor <- as.data.frame(as.numeric(as.character(valor)))
return( keyval(i, valor) )
}
reduce <- function(i, xi) {
keyval(i, sum(xi))
}
calc <- mapreduce(input=M,
#output=output,
#input.format="text",
map=map,
reduce=reduce,
verbose = FALSE)
C = values( from.dfs( calc ) )
C
}
library(rhdfs)
#Lectura de datos.
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/a.csv")
#Modificamos el nombre de las columnas por comodidad.
colnames(df) <- c("x","y","class")
#Analisis exploratorio del dataset.
#Podemos observar que hay 3 columnas.
head(df)
#Observamos cuantos elementos hay de cada clase.
table(df$class)
#0    1    2
#1000  999 1000
plot(datos$X, datos$Y, col = datos$class,
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
plot(df$X, df$Y, col = df$class,
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
plot(df$X, df$Y, col = df$class,
xlim = c(min(datos$X-100), max(datos$X+100)),
ylim = c(min(datos$Y-100), max(datos$Y+100)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
plot(df$X, df$Y, col = df$class,
xlim = c(min(df$X-100), max(df$X+100)),
ylim = c(min(df$Y-100), max(df$Y+100)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
#Lectura de datos.
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/a.csv")
#Modificamos el nombre de las columnas por comodidad.
colnames(df) <- c("x","y","class")
#Analisis exploratorio del dataset.
#Podemos observar que hay 3 columnas.
head(df)
#Observamos cuantos elementos hay de cada clase.
table(df$class)
#0    1    2
#1000  999 1000
plot(df$X, df$Y, col = df$class,
xlim = c(min(df$X-50), max(df$X+50)),
ylim = c(min(df$Y-50), max(df$Y+50)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
#Lectura de datos.
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/a.csv")
#Modificamos el nombre de las columnas por comodidad.
colnames(df) <- c("x","y","class")
#Analisis exploratorio del dataset.
#Podemos observar que hay 3 columnas.
head(df)
#Observamos cuantos elementos hay de cada clase.
table(df$class)
#0    1    2
#1000  999 1000
plot(df$X, df$Y, col = df$class,
xlim = c(min(df$X-30), max(df$X+30)),
ylim = c(min(df$Y-30), max(df$Y+30)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
#Lectura de datos.
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/a.csv")
#Modificamos el nombre de las columnas por comodidad.
colnames(df) <- c("x","y","class")
#Analisis exploratorio del dataset.
#Podemos observar que hay 3 columnas.
head(df)
#Observamos cuantos elementos hay de cada clase.
table(df$class)
#0    1    2
#1000  999 1000
plot(df$X, df$Y, col = df$class,
xlim = c(min(df$X-20), max(df$X+20)),
ylim = c(min(df$Y-20), max(df$Y+20)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
plot(df$x, df$y, col = df$class)
plot(df$x, df$y)
modelo.k.medias = kmeans(x = df[, c("x", "y")], centers = 3)
plot(x = df$x, y = df$y, col = modelo.k.medias$cluster)
points(x = modelo.k.medias$centers[, c("x", "y")], col = 1:4, pch = 19, cex = 3)
plot(df$x, df$y), col = df$class)
plot(df$x, df$y, col = df$class)
head(df)
plot(df$x, df$y, col = df$class,
xlim = c(min(df$x-20), max(df$x+20)),
ylim = c(min(df$y-0), max(df$y+20)),
xlab = "X", ylab = "Y",
main = "Clustering Rectangular")
plot(df$x, df$y)
table(modelo.k.medias$cluster, df$class)
modelo.k.medias$cluster
df$class
modelo.k.medias$cluster
modelo.k.medias
matrizconfusion <- table(df$class,modelo.k.medias$cluster,dnn=c("Valor Real", "Prediccion"))
matrizconfusion
matrizconfusion <- table(df$class,modelo.k.medias$cluster,dnn=c("Valor Real", "Cluster"))
matrizconfusion
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/a_big.csv")
View(df)
View(df)
colnames(df) <- c("x","y","class")
plot(df$x, df$y)
modelo.k.medias = kmeans(x = df[, c("x", "y")], centers = 3)
plot(x = df$x, y = df$y, col = modelo.k.medias$cluster)
points(x = modelo.k.medias$centers[, c("x", "y")], col = 1:4, pch = 19, cex = 3)
table(df$class)
matrizconfusion <- table(df$class,modelo.k.medias$cluster,dnn=c("Valor Real", "Cluster"))
matrizconfusion
df = read.csv(file = "C:/Users/Eric/Desktop/AprendizajeNoSupervisado/data/good_luck.csv")
colnames(df)[11] <- "class"
table(df$class)
plot(df)
plot(df)
modelo.k.medias = kmeans(x = df[, -c("class")], centers = 3)
head(df)
modelo.k.medias = kmeans(x = df[, c("X.0.262989", "X.0.868793", "X0.133290" ,
"X2.745286", "X.0.047937", "X1.357079", "X.0.499947",
"X.1.874985", "X.0.395397","X1.563203")], centers = 3)
table(modelo.k.medias$cluster, df$class)
modelo.k.medias = kmeans(x = df[, c("X.0.262989", "X.0.868793", "X0.133290" ,
"X2.745286", "X.0.047937", "X1.357079", "X.0.499947",
"X.1.874985", "X.0.395397","X1.563203")], centers = 2)
table(modelo.k.medias$cluster, df$class)
entrada.num = df
entrada.num$Class = NULL
entrada.num = as.matrix(entrada.num)
distancia = dist(entrada.num)
distancia
cluster = hclust(distancia, method = metodo)
metodo = "complete"
cluster = hclust(distancia, method = metodo)
plot(cluster)
nclases = 2
corte = cutree(cluster, k=nclases)
table(df$class, corte)
corte = cutree(cluster, h=15)
unique(corte)
corte = cutree(cluster, h=13)
unique(corte)
corte = cutree(cluster, h=5)
unique(corte)
corte = cutree(cluster, h=9)
unique(corte)
corte = cutree(cluster, h=11)
# Verificamos cuántos clúster tenemos
unique(corte)
corte = cutree(cluster, h=10)
unique(corte)
corte = cutree(cluster, h=9.5)
# Verificamos cuántos clúster tenemos
unique(corte)
corte = cutree(cluster, h=9.0)
# Verificamos cuántos clúster tenemos
unique(corte)
corte = cutree(cluster, h=9.2)
# Verificamos cuántos clúster tenemos
unique(corte)
corte = cutree(cluster, h=9.3)
# Verificamos cuántos clúster tenemos
unique(corte)
table(df$class, corte)
plot(df)
x <- c(2,6,67,85,7,9,4,21,78,45)
cle <- ifelse (x %% 2 == 0, 1, 2)
cle
keyval(cle,x)
x <- c(2,6,67,85,7,9,4,21,78,45)
cle <- ifelse (x %% 2 == 0, 1, 2)
keyval(cle,x)
library(rmr2)
ignore <- rmr.options(backend="local") # Opciones "local" o "hadoop"
?rpart
install.packages("rpart")
install.packages("rpart")
install.packages('rpart')
iris
kmeans(iris,k=2)
?kmeans
kmeans(iris,2)
newiris <- iris
newiris$Species <- NULL
kc <- kmeans(newiris, 3)
table(iris$Species, kc ,dnn = c("Valor","prediccion"))
newiris <- iris
newiris$Species <- NULL
kc <- kmeans(newiris, 3)
table(iris$Species, kc ,dnn = c("Valor","prediccion"))
table(iris$Species, kc)
table(iris$Species, kc)
table(iris$Species, kc$cluster ,dnn = c("Valor","prediccion"))
table(kc$cluster, iris$Species ,dnn = c("prediccion","Valor"))
x<-table(kc$cluster, iris$Species ,dnn = c("prediccion","Valor"))
x[1,]
sum(x[1,])
x<-table(kc$cluster, iris$Species ,dnn = c("prediccion","Valor"))
x
install = function(pkg)
{
# Si ya está instalado, no lo instala.
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
if (!require(pkg, character.only = TRUE)) stop(paste("load failure:", pkg))
}
}
#Instalo automaticamente los paquetes.
install('arules')
install('arulesViz')
install('FactoMineR')
#Cargo las librerias.
library(arules)
library(arulesViz)
library(FactoMineR)
##-------------------------------LECTURA Y ANALISIS-----------------------------------
setwd("C:/Users/Eric/Desktop/recomendacion-modelos/")
ejemplo <- read.csv("data/ejemplo.csv")
periodico <- read.csv("data/periodico.csv")
##------------------------------------------------------------------------------------
##----------------------------GENERACION DE ARTICULOS---------------------------------
'''
1. Modiﬁcar su dataset de tal manera que no se lean los identiﬁcadores de los artículos
como itemN sino por su tipo de contenido contenido/articuloN.
Ejemplo: {item1, item10, item81}
es la transacción {deportes/articulo1, politica
/articulo1, opinion/articulo9}.
'''
#deportes 1-9
#politica 10-18
#variedades 19-27
#internacional 28-36
#nacionales 37-45
#sucesos 46-54
#comunidad 55-63
#negocios 64-72
#opinion 73-81
#------------------FUNCTION genArticles-----------------
genArticles <- function(articles){
articulo <- ""
for (i in 1:length(articles)) {
if (as.integer(articles[i]) <= 9 & as.integer(articles[i]) >= 1){
articulo <- paste(articulo, gsub(" ","",paste("deportes/articulo",articles[i])))
}
if (as.integer(articles[i]) <= 18 & as.integer(articles[i]) >= 10){
articulo <- paste(articulo, gsub(" ","",paste("politica/articulo",(as.integer(articles[i])-9))))
}
if (as.integer(articles[i]) <= 27 & as.integer(articles[i]) >= 19){
articulo <- paste(articulo, gsub(" ","",paste("variedades/articulo",(as.integer(articles[i])-18))))
}
if (as.integer(articles[i]) <= 36 & as.integer(articles[i]) >= 28){
articulo <- paste(articulo, gsub(" ","",paste("internacional/articulo",(as.integer(articles[i])-27))))
}
if (as.integer(articles[i]) <= 45 & as.integer(articles[i]) >= 37){
articulo <- paste(articulo, gsub(" ","",paste("nacionales/articulo",(as.integer(articles[i])-36))))
}
if (as.integer(articles[i]) <= 54 & as.integer(articles[i]) >= 46){
articulo <- paste(articulo, gsub(" ","",paste("sucesos/articulo",(as.integer(articles[i])-45))))
}
if (as.integer(articles[i]) <= 63 & as.integer(articles[i]) >= 55){
articulo <- paste(articulo, gsub(" ","",paste("comunidad/articulo",(as.integer(articles[i])-54))))
}
if (as.integer(articles[i]) <= 72 & as.integer(articles[i]) >= 64){
articulo <- paste(articulo, gsub(" ","",paste("negocios/articulo",(as.integer(articles[i])-63))))
}
if (as.integer(articles[i]) <= 81 & as.integer(articles[i]) >= 73){
articulo <- paste(articulo, gsub(" ","",paste("opinion/articulo",(as.integer(articles[i])-72))))
}
}
return(articulo)
}
#Cambio el nombre de la columna para que tenga coherencia con el ejemplo dado.
colnames(periodico)[5] <- "items"
#Creo la columna de los articulos
periodico$articles <- periodico$items
#Se sabe que el portal ofrece 9 tipos de contenidos
#y nos ofrecen solo información de 9 artículos.
#Obtengo el numero de los articulos.
periodico$articles <- strsplit(gsub("[{}item]","",periodico$articles), ",")
#Modifico el dataset con las condiciones dadas.
periodico$articles <- lapply(periodico$articles, genArticles)
#Convierto los espacios en ,
periodico$articles <- gsub(" ",",",periodico$articles)
#Elimino la primer valor del string.
periodico$articles <- substring(periodico$articles, 2)
#Calculo el tiempo totan el segundos que dura el usuario en la pagina.
periodico$tiempototal <- difftime(periodico$exit, periodico$entry, units =  "secs")
#Generar la matriz de transacciones.
llenar <- function(periodico,fila){
items <- as.numeric(unlist(strsplit(gsub("[{}item]","",unlist(periodico)), ",")))
fila[items]=1
return(fila)
}
llenar <- function(periodico,fila){
items <- as.numeric(unlist(strsplit(gsub("[{}item]","",unlist(periodico)), ",")))
fila[items]=1
return(fila)
}
fila <- matrix(data = 0, nrow = 1, ncol = 81)
period <- periodico[1:2,]
matriz <- matrix()
matriz <- lapply(period$items, llenar,fila)
matriz
View(matriz)
transactions = matrix((matriz), byrow=T, ncol=81)
transactions = matrix(unlist(matriz), byrow=T, ncol=81)
View(transactions)
llenar <- function(periodico,fila){
items <- as.numeric(unlist(strsplit(gsub("[{}item]","",unlist(periodico)), ",")))
fila[items]=1
return(fila)
}
fila <- matrix(data = 0, nrow = 1, ncol = 81)
matriz <- lapply(periodico$items, llenar,fila)
matriz <- matrix(unlist(matriz), byrow=T, ncol=81)
View(matriz)
for (i in 1:9) {
colnames(matriz[1:9]) <-  gsub(" ","",paste("deportes/articulo",i))
}
for (i in 1:9) {
colnames(matriz[,1:9]) <-  gsub(" ","",paste("deportes/articulo",i))
}
colnames(matriz) <-  gsub(" ","",paste("deportes/articulo",1:9))
gsub(" ","",paste("deportes/articulo",1:9))
for (i in 1:9) {
colnames(matriz)[i] <-  gsub(" ","",paste("deportes/articulo",1:9))
}
colnames(matriz)[1]
colnames(matriz)[1] <-"hola"
colnames(matriz)[2]
colnames(matriz)[2] <- "done"
colnames(matriz)
gsub(" ","",paste("deportes/articulo",1:9))
colnames(matriz)[1:9] <-  gsub(" ","",paste("deportes/articulo",1:9))
colnames(matriz) <-  gsub(" ","",paste("deportes/articulo",1:81))
View(matriz)
colnames(matriz) <-  c(gsub(" ","",paste("deportes/articulo",1:9)),gsub(" ","",paste("politica/articulo",1:9)),
gsub(" ","",paste("variedades/articulo",1:9)), gsub(" ","",paste("internacional/articulo",1:9)),
gsub(" ","",paste("nacionales/articulo",1:9)), gsub(" ","",paste("sucesos/articulo",1:9)),
gsub(" ","",paste("comunidad/articulo",1:9)), gsub(" ","",paste("negocios/articulo",1:9)),
gsub(" ","",paste("opinion/articulo",1:9)))
View(matriz)
rules <- apriori(matriz,parameter = list(support = 0.0001, confidence = 0.0))
summary(matriz)
rules <- apriori(matriz,parameter = list(support = 0.005, confidence = 0.1))
summary(rules)
periodico$numItems <- rowSums(matriz)
numerobots <- periodico[periodico$numItems*20 >= tiempototal,]
numerobots <- periodico[periodico$numItems*20 >= periodico$tiempototal,]
numerobots <- periodico[periodico$numItems >= periodico$tiempototal/20,]
View(numerobots)
View(numerobots)
length(numerobots)
nrow(numerobots)
rules <- apriori(matriz,parameter = list(support = 0.005, confidence = 0.1))
summary(rules)
summary(matriz)
matriz <- as(matriz, "transactions")
summary(matriz)
