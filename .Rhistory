df
})
}
else
{
dataset()
}
})
output$contents<-renderTable({
if (is.null(input$file)) { return() }
alterdata()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
tabsetPanel(
tabPanel(tableOutput('contents'))
)
),
server = function(input, output) {
dataset = reactive({
inFile<-input$file
if(is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header=input$header, sep=input$sep)
})
alterdata = reactive({
if(input$addcol!=0&&input$addvar!=0){
isolate({
df<-dataset()
df$Var1<-eval(parse(text=input$newformula), df)
df<-rename(df, c(Var1=input$newvar))
#add these two lines
updateTextInput(session, "newvar", value = " ")
updateTextInput(session, "newformula", value = " ")
df
})
}
else
{
dataset()
}
})
output$contents<-renderTable({
if (is.null(input$file)) { return() }
alterdata()
})
}
)
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
tabsetPanel(
tabPanel(tableOutput('contents'))
),
server = function(input, output) {
dataset = reactive({
inFile<-input$file
if(is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header=input$header, sep=input$sep)
})
alterdata = reactive({
if(input$addcol!=0&&input$addvar!=0){
isolate({
df<-dataset()
df$Var1<-eval(parse(text=input$newformula), df)
df<-rename(df, c(Var1=input$newvar))
#add these two lines
updateTextInput(session, "newvar", value = " ")
updateTextInput(session, "newformula", value = " ")
df
})
}
else
{
dataset()
}
})
output$contents<-renderTable({
if (is.null(input$file)) { return() }
alterdata()
})
}
)
)
sd
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
tabsetPanel(
tabPanel(tableOutput('contents'))))
),
server = function(input, output) {
dataset = reactive({
inFile<-input$file
if(is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header=input$header, sep=input$sep)
})
alterdata = reactive({
if(input$addcol!=0&&input$addvar!=0){
isolate({
df<-dataset()
df$Var1<-eval(parse(text=input$newformula), df)
df<-rename(df, c(Var1=input$newvar))
#add these two lines
updateTextInput(session, "newvar", value = " ")
updateTextInput(session, "newformula", value = " ")
df
})
}
else
{
dataset()
}
})
output$contents<-renderTable({
if (is.null(input$file)) { return() }
alterdata()
})
}
)
)
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
plotOutput("plot"))
),
server = function(input, output) {
cap <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
cap()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption", container = span)),
h3(textOutput("TEXT1", container = span))
),
server = function(input, output) {
cap <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
cap()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption", container = span)),
h3(textOutput("TEXT1", container = span)
),
server = function(input, output) {
cap <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
cap()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption", container = span)),
h3(textOutput("TEXT1", container = span)))
),
server = function(input, output) {
cap <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
cap()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption")),
h3(textOutput("TEXT1")))
),
server = function(input, output) {
cap <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
cap()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption")),
h3(textOutput("TEXT1")))
),
server = function(input, output) {
dataset <- eventReactive(input$addButton, {
inFile <- input$file1
inFile$datapath
})
target <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
dataset()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption")),
h3(textOutput("TEXT1")))
),
server = function(input, output) {
dataset <- eventReactive(input$addButton, {
inFile <- input$file1
df <- read.csv(inFile$datapath)
colnames(df)
})
target <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
dataset()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption")),
h3(textOutput("TEXT1")))
),
server = function(input, output) {
dataset <- eventReactive(input$addButton, {
inFile <- input$file1
df <- read.csv(inFile$datapath)
df$scores
})
target <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
dataset()
})
output$TEXT1 <- renderText({
text()
})
}
)
)
require(shiny)
runApp(
list(
ui = fluidPage(
headerPanel('Generador de curvas ROC'),
sidebarPanel(
fileInput('file1', 'Seleccione el .csv para generar la curva ROC'),
textInput("target", label="Target", value="Introduzca el target"),
p('Puede introducir los datos manualmente si lo desea.'),
textInput("scores", label="Scores", value="Introduzca el vector de scores"),
textInput("real", label="Real", value="Introduzca el vector de las clases"),
actionButton("addButton", "GENERAR CURVA DE ROC")
),
mainPanel(
h3(textOutput("caption")),
h3(textOutput("TEXT1")))
),
server = function(input, output) {
dataset <- eventReactive(input$addButton, {
inFile <- input$file1
df <- read.csv(inFile$datapath)
df$scores
})
target <- eventReactive(input$addButton, {
input$target
})
text <- eventReactive(input$addButton, {
input$scores
})
output$caption <- renderText({
dataset()*2
})
output$TEXT1 <- renderText({
text()
})
}
)
)
real <- df$real
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
source('C:/Users/Eric/Desktop/generate_rocSHINY.R')
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
install.packages("reshape")
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
install.packages("cairo")
install.packages("Cairo")
runApp('C:/Users/Eric/Desktop/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f/9690079-a882ac463928fc1d8cf13accfbd958eefe30038f')
plot(iris)
plot(iris)
plot(iris)
print("h")
data(iris)
plot(iris)
View(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
